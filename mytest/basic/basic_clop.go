// Code generated by clop-gen; DO NOT EDIT.

package basic

import (
	"fmt"
	"os"
	"strconv"
	"strings"
	"time"
)


// pcurl的Parse方法，用于解析命令行参数
func (c *pcurl) Parse(args []string) error {
	if len(args) == 0 {
		args = os.Args[1:]
	}

	for i := 0; i < len(args); i++ {
		arg := args[i]
		switch {
		
		case arg == "-X" || arg == "--request":
			
			if i+1 >= len(args) {
				return fmt.Errorf("missing value for --request")
			}
			
			c.Method = args[i+1]
			
			i++
			
		case arg == "-G" || arg == "--get":
			
			c.Get = true
			
		case arg == "-H" || arg == "--header":
			
			if i+1 >= len(args) {
				return fmt.Errorf("missing value for --header")
			}
			
			c.Header = strings.Split(args[i+1], ",")
			
			i++
			
		case arg == "-d" || arg == "--data":
			
			if i+1 >= len(args) {
				return fmt.Errorf("missing value for --data")
			}
			
			c.Data = args[i+1]
			
			i++
			
		case arg == "--data-raw":
			
			if i+1 >= len(args) {
				return fmt.Errorf("missing value for --data-raw")
			}
			
			c.DataRaw = args[i+1]
			
			i++
			
		case arg == "-F" || arg == "--form":
			
			if i+1 >= len(args) {
				return fmt.Errorf("missing value for --form")
			}
			
			c.Form = strings.Split(args[i+1], ",")
			
			i++
			
		case arg == "--url":
			
			if i+1 >= len(args) {
				return fmt.Errorf("missing value for --url")
			}
			
			c.URL = args[i+1]
			
			i++
			
		case arg == "-L" || arg == "--location":
			
			c.Location = true
			
		case arg == "--data-urlencode":
			
			if i+1 >= len(args) {
				return fmt.Errorf("missing value for --data-urlencode")
			}
			
			c.DataUrlencode = strings.Split(args[i+1], ",")
			
			i++
			
		case arg == "--compressed":
			
			c.Compressed = true
			
		case arg == "-i" || arg == "--include":
			
			c.Include = true
			
		case arg == "-k" || arg == "--insecure":
			
			c.Insecure = true
			
		case !strings.HasPrefix(arg, "-"):
			
			c.URL2 = arg
			
		default:
			return fmt.Errorf("unknown option: %s", arg)
		}
	}

	return nil
}

func (c *pcurl) Usage() {
	fmt.Println(`USAGE:
  myapp [OPTIONS] [ARGS]

OPTIONS:
    -X, --request    Specify request command to use
    -G, --get    Put the post data in the URL and use GET
    -H, --header    Pass custom header(s) to server
    -d, --data    HTTP POST data
    --data-raw    HTTP POST data, '@' allowed
    -F, --form    Specify multipart MIME data
    --url    URL to work with
    -L, --location    Follow redirects
    --data-urlencode    HTTP POST data url encoded
    --compressed    Request compressed response
    -i, --include    Include the HTTP response headers in the output. The HTTP response headers can include things like server name, cookies, date of the document, HTTP version and more.
    -k, --insecure    Allow insecure server connections when using SSL

ARGS:
    URL2    url2
`)
}