// Code generated by clop-gen; DO NOT EDIT.

package advanced

import (
	"fmt"
	"os"
	"strconv"
	"strings"
	"time"
	"encoding/json"
	"gopkg.in/yaml.v3"
	"github.com/BurntSushi/toml"
	"path/filepath"
)


// Code generated by clop-gen; DO NOT EDIT.
// 子命令处理函数类型
type CommandFunc func(args []string) error

// 子命令信息
type SubcommandInfo struct {
	Name        string
	Description string
	Func        CommandFunc
}

// CLI的Parse方法，用于解析命令行参数
func (c *CLI) Parse(args []string) error {
	if len(args) == 0 {
		args = os.Args[1:]
	}

	
	// 检查是否有子命令
	if len(args) > 0 && !strings.HasPrefix(args[0], "-") {
		subcommand := args[0]
		subcommandArgs := args[1:]

		switch subcommand {
		
		case "Server":
			return c.Server.Parse(subcommandArgs)
		
		case "Client":
			return c.Client.Parse(subcommandArgs)
		
		default:
			return fmt.Errorf("未知子命令: %s", subcommand)
		}
	}
	

	// 检查是否指定了配置文件
	var configFile string
	for i := 0; i < len(args); i++ {
		if args[i] == "--config" || args[i] == "-c" {
			if i+1 < len(args) {
				configFile = args[i+1]
				// 移除 --config 和它的值，避免后续解析错误
				if i+2 < len(args) {
					args = append(args[:i], args[i+2:]...)
				} else {
					args = args[:i]
				}
				i--
				break
			}
		}
	}

	// 从配置文件加载选项
	if configFile != "" {
		if err := c.loadFromConfigFile(configFile); err != nil {
			return fmt.Errorf("加载配置文件失败: %w", err)
		}
	}

	for i := 0; i < len(args); i++ {
		arg := args[i]
		switch {
		case arg == "--help" || arg == "-h":
			c.Usage()
			os.Exit(0)
		
		case arg == "-v" || arg == "--verbose":
			
			c.Verbose = true
			
		
		case arg == "-c" || arg == "--config":
			
			if i+1 >= len(args) {
				return fmt.Errorf("missing value for --config")
			}
			
			c.ConfigFile = args[i+1]
			
			i++
			
		
		case arg == "-t" || arg == "--timeout":
			
			if i+1 >= len(args) {
				return fmt.Errorf("missing value for --timeout")
			}
			
			duration, err := time.ParseDuration(args[i+1])
			if err != nil {
				return fmt.Errorf("invalid value for --timeout: %v", err)
			}
			c.Timeout = duration
			
			i++
			
		
		
		default:
			return fmt.Errorf("unknown option: %s", arg)
		}
	}

	return nil
}

func (c *CLI) Usage() {
	fmt.Println(`USAGE:
  myapp [SUBCOMMAND] [OPTIONS]

SUBCOMMANDS:
    Server    
    Client    

OPTIONS:
    -c, --config    指定配置文件路径 (支持 JSON, YAML, TOML)
    -h, --help      显示帮助信息
    -v, --verbose    Enable verbose output
    -c, --config    Configuration file path
    -t, --timeout    Operation timeout
`)
}

func (c *CLI) loadFromConfigFile(configFile string) error {
	data, err := os.ReadFile(configFile)
	if err != nil {
		return fmt.Errorf("读取配置文件失败: %w", err)
	}

	// 根据文件扩展名选择解析方式
	ext := filepath.Ext(configFile)
	switch strings.ToLower(ext) {
	case ".json":
		return json.Unmarshal(data, c)
	case ".yaml", ".yml":
		return yaml.Unmarshal(data, c)
	case ".toml":
		_, err := toml.Decode(string(data), c)
		return err
	default:
		return fmt.Errorf("不支持的配置文件格式: %s", ext)
	}
}

// Code generated by clop-gen; DO NOT EDIT.

// ServerCmd的Parse方法，用于解析命令行参数
func (c *ServerCmd) Parse(args []string) error {
	if len(args) == 0 {
		args = os.Args[1:]
	}

	

	// 检查是否指定了配置文件
	var configFile string
	for i := 0; i < len(args); i++ {
		if args[i] == "--config" || args[i] == "-c" {
			if i+1 < len(args) {
				configFile = args[i+1]
				// 移除 --config 和它的值，避免后续解析错误
				if i+2 < len(args) {
					args = append(args[:i], args[i+2:]...)
				} else {
					args = args[:i]
				}
				i--
				break
			}
		}
	}

	// 从配置文件加载选项
	if configFile != "" {
		if err := c.loadFromConfigFile(configFile); err != nil {
			return fmt.Errorf("加载配置文件失败: %w", err)
		}
	}

	for i := 0; i < len(args); i++ {
		arg := args[i]
		switch {
		case arg == "--help" || arg == "-h":
			c.Usage()
			os.Exit(0)
		
		case arg == "-p" || arg == "--port":
			
			if i+1 >= len(args) {
				return fmt.Errorf("missing value for --port")
			}
			
			val, err := strconv.Atoi(args[i+1])
			if err != nil {
				return fmt.Errorf("invalid value for --port: %v", err)
			}
			c.Port = val
			
			i++
			
		
		case arg == "-h" || arg == "--host":
			
			if i+1 >= len(args) {
				return fmt.Errorf("missing value for --host")
			}
			
			c.Host = args[i+1]
			
			i++
			
		
		case arg == "--cert":
			
			if i+1 >= len(args) {
				return fmt.Errorf("missing value for --cert")
			}
			
			c.CertFile = args[i+1]
			
			i++
			
		
		case arg == "--key":
			
			if i+1 >= len(args) {
				return fmt.Errorf("missing value for --key")
			}
			
			c.KeyFile = args[i+1]
			
			i++
			
		
		case arg == "--start-at":
			
			if i+1 >= len(args) {
				return fmt.Errorf("missing value for --start-at")
			}
			
			t, err := time.Parse(time.RFC3339, args[i+1])
			if err != nil {
				return fmt.Errorf("invalid value for --start-at: %v", err)
			}
			c.StartAt = &t
			
			i++
			
		
		case arg == "--interval":
			
			if i+1 >= len(args) {
				return fmt.Errorf("missing value for --interval")
			}
			
			duration, err := time.ParseDuration(args[i+1])
			if err != nil {
				return fmt.Errorf("invalid value for --interval: %v", err)
			}
			c.Interval = duration
			
			i++
			
		
		
		default:
			return fmt.Errorf("unknown option: %s", arg)
		}
	}

	return nil
}

func (c *ServerCmd) Usage() {
	fmt.Println(`USAGE:
  myapp [OPTIONS]

OPTIONS:
    -c, --config    指定配置文件路径 (支持 JSON, YAML, TOML)
    -h, --help      显示帮助信息
    -p, --port    Server port
    -h, --host    Server host
    --cert    TLS certificate file
    --key    TLS key file
    --start-at    Schedule server start time (RFC3339 format)
    --interval    Health check interval
`)
}

func (c *ServerCmd) loadFromConfigFile(configFile string) error {
	data, err := os.ReadFile(configFile)
	if err != nil {
		return fmt.Errorf("读取配置文件失败: %w", err)
	}

	// 根据文件扩展名选择解析方式
	ext := filepath.Ext(configFile)
	switch strings.ToLower(ext) {
	case ".json":
		return json.Unmarshal(data, c)
	case ".yaml", ".yml":
		return yaml.Unmarshal(data, c)
	case ".toml":
		_, err := toml.Decode(string(data), c)
		return err
	default:
		return fmt.Errorf("不支持的配置文件格式: %s", ext)
	}
}

// Code generated by clop-gen; DO NOT EDIT.

// ClientCmd的Parse方法，用于解析命令行参数
func (c *ClientCmd) Parse(args []string) error {
	if len(args) == 0 {
		args = os.Args[1:]
	}

	

	// 检查是否指定了配置文件
	var configFile string
	for i := 0; i < len(args); i++ {
		if args[i] == "--config" || args[i] == "-c" {
			if i+1 < len(args) {
				configFile = args[i+1]
				// 移除 --config 和它的值，避免后续解析错误
				if i+2 < len(args) {
					args = append(args[:i], args[i+2:]...)
				} else {
					args = args[:i]
				}
				i--
				break
			}
		}
	}

	// 从配置文件加载选项
	if configFile != "" {
		if err := c.loadFromConfigFile(configFile); err != nil {
			return fmt.Errorf("加载配置文件失败: %w", err)
		}
	}

	for i := 0; i < len(args); i++ {
		arg := args[i]
		switch {
		case arg == "--help" || arg == "-h":
			c.Usage()
			os.Exit(0)
		
		case arg == "-s" || arg == "--server":
			
			if i+1 >= len(args) {
				return fmt.Errorf("missing value for --server")
			}
			
			c.Server = args[i+1]
			
			i++
			
		
		case arg == "-t" || arg == "--timeout":
			
			if i+1 >= len(args) {
				return fmt.Errorf("missing value for --timeout")
			}
			
			duration, err := time.ParseDuration(args[i+1])
			if err != nil {
				return fmt.Errorf("invalid value for --timeout: %v", err)
			}
			c.Timeout = &duration
			
			i++
			
		
		case arg == "-r" || arg == "--retries":
			
			if i+1 >= len(args) {
				return fmt.Errorf("missing value for --retries")
			}
			
			val, err := strconv.Atoi(args[i+1])
			if err != nil {
				return fmt.Errorf("invalid value for --retries: %v", err)
			}
			c.Retries = val
			
			i++
			
		
		
		case !strings.HasPrefix(arg, "-"):
			
			
			
			
			
			c.Operation = arg
			
			
			
		
		default:
			return fmt.Errorf("unknown option: %s", arg)
		}
	}

	return nil
}

func (c *ClientCmd) Usage() {
	fmt.Println(`USAGE:
  myapp [OPTIONS] [ARGS]

OPTIONS:
    -c, --config    指定配置文件路径 (支持 JSON, YAML, TOML)
    -h, --help      显示帮助信息
    -s, --server    Server address
    -t, --timeout    Connection timeout
    -r, --retries    Number of retries

ARGS:
    operation    Operation to perform
`)
}

func (c *ClientCmd) loadFromConfigFile(configFile string) error {
	data, err := os.ReadFile(configFile)
	if err != nil {
		return fmt.Errorf("读取配置文件失败: %w", err)
	}

	// 根据文件扩展名选择解析方式
	ext := filepath.Ext(configFile)
	switch strings.ToLower(ext) {
	case ".json":
		return json.Unmarshal(data, c)
	case ".yaml", ".yml":
		return yaml.Unmarshal(data, c)
	case ".toml":
		_, err := toml.Decode(string(data), c)
		return err
	default:
		return fmt.Errorf("不支持的配置文件格式: %s", ext)
	}
}
