// Code generated by clop-gen; DO NOT EDIT.

package main

import (
	"fmt"
	"os"
	"strconv"
	"time"
	"encoding/json"
	"gopkg.in/yaml.v3"
	"github.com/BurntSushi/toml"
	"path/filepath"
)


// Code generated by clop-gen; DO NOT EDIT.

// Config的Parse方法，用于解析命令行参数
func (c *Config) Parse(args []string) error {
	if len(args) == 0 {
		args = os.Args[1:]
	}
	// 设置默认值
	if t, err := time.Parse(time.RFC3339, "2025-01-01T00:00:00Z"); err == nil {
		c.StartTime = t
	}
	
	if duration, err := time.ParseDuration("24h"); err == nil {
		c.Duration = duration
	}
	
	if val, err := strconv.Atoi("30"); err == nil {
		c.Timeout = val
	}
	if val, err := strconv.ParseBool("true"); err == nil {
		c.EnableLogs = val
	}

	

	// 检查是否指定了配置文件
	var configFile string
	for i := 0; i < len(args); i++ {
		if args[i] == "--config" || args[i] == "-c" {
			if i+1 < len(args) {
				configFile = args[i+1]
				// 移除 --config 和它的值，避免后续解析错误
				if i+2 < len(args) {
					args = append(args[:i], args[i+2:]...)
				} else {
					args = args[:i]
				}
				i--
				break
			}
		}
	}

	// 从配置文件加载选项
	if configFile != "" {
		if err := c.loadFromConfigFile(configFile); err != nil {
			return fmt.Errorf("加载配置文件失败: %w", err)
		}
	}

	for i := 0; i < len(args); i++ {
		arg := args[i]
		switch {
		case arg == "--help" || arg == "-h":
			c.Usage()
			os.Exit(0)
		
		case arg == "--start-time":
			
			if i+1 >= len(args) {
				return fmt.Errorf("missing value for --start-time")
			}
			
			t, err := time.Parse(time.RFC3339, args[i+1])
			if err != nil {
				return fmt.Errorf("invalid value for --start-time: %v", err)
			}
			c.StartTime = t
			
			i++
			
		
		case arg == "-d" || arg == "--duration":
			
			if i+1 >= len(args) {
				return fmt.Errorf("missing value for --duration")
			}
			
			duration, err := time.ParseDuration(args[i+1])
			if err != nil {
				return fmt.Errorf("invalid value for --duration: %v", err)
			}
			c.Duration = duration
			
			i++
			
		
		case arg == "-t" || arg == "--timeout":
			
			if i+1 >= len(args) {
				return fmt.Errorf("missing value for --timeout")
			}
			
			val, err := strconv.Atoi(args[i+1])
			if err != nil {
				return fmt.Errorf("invalid value for --timeout: %v", err)
			}
			c.Timeout = val
			
			i++
			
		
		case arg == "--enable-logs":
			
			c.EnableLogs = true
			
		
		
		default:
			return fmt.Errorf("unknown option: %s", arg)
		}
	}

	return nil
}

func (c *Config) Usage() {
	fmt.Println(`USAGE:
  myapp [OPTIONS]

OPTIONS:
    -c, --config    指定配置文件路径 (支持 JSON, YAML, TOML)
    -h, --help      显示帮助信息
    --start-time    开始时间 (default: 2025-01-01T00:00:00Z)
    -d, --duration    持续时间 (default: 24h)
    -t, --timeout    超时时间（秒） (default: 30)
    --enable-logs    启用日志 (default: true)
`)
}

func (c *Config) loadFromConfigFile(configFile string) error {
	data, err := os.ReadFile(configFile)
	if err != nil {
		return fmt.Errorf("读取配置文件失败: %w", err)
	}

	// 根据文件扩展名选择解析方式
	ext := filepath.Ext(configFile)
	switch strings.ToLower(ext) {
	case ".json":
		return json.Unmarshal(data, c)
	case ".yaml", ".yml":
		return yaml.Unmarshal(data, c)
	case ".toml":
		_, err := toml.Decode(string(data), c)
		return err
	default:
		return fmt.Errorf("不支持的配置文件格式: %s", ext)
	}
}
