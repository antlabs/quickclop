
// Code2 generated by clop-gen; DO NOT EDIT.

package main
import (
	"fmt"
	"os"
	"strconv"
	"strings"
	"encoding/json"
	"gopkg.in/yaml.v3"
	"github.com/BurntSushi/toml"
	"path/filepath"
)

// Config的Parse方法，用于解析命令行参数
func (c *Config) Parse(args []string) error {
	if len(args) == 0 {
		args = os.Args[1:]
	}

	// 设置默认值
	for _, s := range strings.Split("1,2,3", ",") {
		if val, err := strconv.Atoi(s); err == nil {
			c.IntSlice = append(c.IntSlice, val)
		}
	}
	
	for _, s := range strings.Split("1,2,3", ",") {
		if val, err := strconv.ParseInt(s, 10, 8); err == nil {
			c.Int8Slice = append(c.Int8Slice, int8(val))
		}
	}
	
	for _, s := range strings.Split("1,2,3", ",") {
		if val, err := strconv.ParseInt(s, 10, 16); err == nil {
			c.Int16Slice = append(c.Int16Slice, int16(val))
		}
	}
	
	for _, s := range strings.Split("1,2,3", ",") {
		if val, err := strconv.ParseInt(s, 10, 32); err == nil {
			c.Int32Slice = append(c.Int32Slice, int32(val))
		}
	}
	
	for _, s := range strings.Split("1,2,3", ",") {
		if val, err := strconv.ParseInt(s, 10, 64); err == nil {
			c.Int64Slice = append(c.Int64Slice, val)
		}
	}
	
	for _, s := range strings.Split("1,2,3", ",") {
		if val, err := strconv.ParseUint(s, 10, 0); err == nil {
			c.UintSlice = append(c.UintSlice, uint(val))
		}
	}
	
	for _, s := range strings.Split("1,2,3", ",") {
		if val, err := strconv.ParseUint(s, 10, 8); err == nil {
			c.Uint8Slice = append(c.Uint8Slice, uint8(val))
		}
	}
	
	for _, s := range strings.Split("1,2,3", ",") {
		if val, err := strconv.ParseUint(s, 10, 16); err == nil {
			c.Uint16Slice = append(c.Uint16Slice, uint16(val))
		}
	}
	
	for _, s := range strings.Split("1,2,3", ",") {
		if val, err := strconv.ParseUint(s, 10, 32); err == nil {
			c.Uint32Slice = append(c.Uint32Slice, uint32(val))
		}
	}
	
	for _, s := range strings.Split("1,2,3", ",") {
		if val, err := strconv.ParseUint(s, 10, 64); err == nil {
			c.Uint64Slice = append(c.Uint64Slice, val)
		}
	}
	
	for _, s := range strings.Split("1.1,2.2,3.3", ",") {
		if val, err := strconv.ParseFloat(s, 32); err == nil {
			c.Float32Slice = append(c.Float32Slice, float32(val))
		}
	}
	
	for _, s := range strings.Split("1.1,2.2,3.3", ",") {
		if val, err := strconv.ParseFloat(s, 64); err == nil {
			c.Float64Slice = append(c.Float64Slice, val)
		}
	}
	
	for _, s := range strings.Split("true,false,true", ",") {
		if val, err := strconv.ParseBool(s); err == nil {
			c.BoolSlice = append(c.BoolSlice, val)
		}
	}
	
	c.StringSlice = strings.Split("a,b,c", ",")
	

	

	// 检查是否指定了配置文件
	var configFile string
	for i := 0; i < len(args); i++ {
		if args[i] == "--config" || args[i] == "-c" {
			if i+1 < len(args) {
				configFile = args[i+1]
				// 移除 --config 和它的值，避免后续解析错误
				if i+2 < len(args) {
					args = append(args[:i], args[i+2:]...)
				} else {
					args = args[:i]
				}
				i--
				break
			}
		}
	}

	// 从配置文件加载选项
	if configFile != "" {
		if err := c.loadFromConfigFile(configFile); err != nil {
			return fmt.Errorf("加载配置文件失败: %w", err)
		}
	}

	for i := 0; i < len(args); i++ {
		arg := args[i]
		switch {
		case arg == "--help" || arg == "-h":
			c.Usage()
			os.Exit(0)
		
		case arg == "--ints":
			
			if i+1 >= len(args) {
				return fmt.Errorf("missing value for --ints")
			}
			
			for _, s := range strings.Split(args[i+1], ",") {
				if val, err := strconv.Atoi(s); err == nil {
					c.IntSlice = append(c.IntSlice, val)
				}
			}
			
			i++
			
		
		case arg == "--int8s":
			
			if i+1 >= len(args) {
				return fmt.Errorf("missing value for --int8s")
			}
			
			for _, s := range strings.Split(args[i+1], ",") {
				if val, err := strconv.ParseInt(s, 10, 8); err == nil {
					c.Int8Slice = append(c.Int8Slice, int8(val))
				}
			}
			
			i++
			
		
		case arg == "--int16s":
			
			if i+1 >= len(args) {
				return fmt.Errorf("missing value for --int16s")
			}
			
			for _, s := range strings.Split(args[i+1], ",") {
				if val, err := strconv.ParseInt(s, 10, 16); err == nil {
					c.Int16Slice = append(c.Int16Slice, int16(val))
				}
			}
			
			i++
			
		
		case arg == "--int32s":
			
			if i+1 >= len(args) {
				return fmt.Errorf("missing value for --int32s")
			}
			
			for _, s := range strings.Split(args[i+1], ",") {
				if val, err := strconv.ParseInt(s, 10, 32); err == nil {
					c.Int32Slice = append(c.Int32Slice, int32(val))
				}
			}
			
			i++
			
		
		case arg == "--int64s":
			
			if i+1 >= len(args) {
				return fmt.Errorf("missing value for --int64s")
			}
			
			for _, s := range strings.Split(args[i+1], ",") {
				if val, err := strconv.ParseInt(s, 10, 64); err == nil {
					c.Int64Slice = append(c.Int64Slice, val)
				}
			}
			
			i++
			
		
		case arg == "--uints":
			
			if i+1 >= len(args) {
				return fmt.Errorf("missing value for --uints")
			}
			
			for _, s := range strings.Split(args[i+1], ",") {
				if val, err := strconv.ParseUint(s, 10, 0); err == nil {
					c.UintSlice = append(c.UintSlice, uint(val))
				}
			}
			
			i++
			
		
		case arg == "--uint8s":
			
			if i+1 >= len(args) {
				return fmt.Errorf("missing value for --uint8s")
			}
			
			for _, s := range strings.Split(args[i+1], ",") {
				if val, err := strconv.ParseUint(s, 10, 8); err == nil {
					c.Uint8Slice = append(c.Uint8Slice, uint8(val))
				}
			}
			
			i++
			
		
		case arg == "--uint16s":
			
			if i+1 >= len(args) {
				return fmt.Errorf("missing value for --uint16s")
			}
			
			for _, s := range strings.Split(args[i+1], ",") {
				if val, err := strconv.ParseUint(s, 10, 16); err == nil {
					c.Uint16Slice = append(c.Uint16Slice, uint16(val))
				}
			}
			
			i++
			
		
		case arg == "--uint32s":
			
			if i+1 >= len(args) {
				return fmt.Errorf("missing value for --uint32s")
			}
			
			for _, s := range strings.Split(args[i+1], ",") {
				if val, err := strconv.ParseUint(s, 10, 32); err == nil {
					c.Uint32Slice = append(c.Uint32Slice, uint32(val))
				}
			}
			
			i++
			
		
		case arg == "--uint64s":
			
			if i+1 >= len(args) {
				return fmt.Errorf("missing value for --uint64s")
			}
			
			for _, s := range strings.Split(args[i+1], ",") {
				if val, err := strconv.ParseUint(s, 10, 64); err == nil {
					c.Uint64Slice = append(c.Uint64Slice, val)
				}
			}
			
			i++
			
		
		case arg == "--float32s":
			
			if i+1 >= len(args) {
				return fmt.Errorf("missing value for --float32s")
			}
			
			for _, s := range strings.Split(args[i+1], ",") {
				if val, err := strconv.ParseFloat(s, 32); err == nil {
					c.Float32Slice = append(c.Float32Slice, float32(val))
				}
			}
			
			i++
			
		
		case arg == "--float64s":
			
			if i+1 >= len(args) {
				return fmt.Errorf("missing value for --float64s")
			}
			
			for _, s := range strings.Split(args[i+1], ",") {
				if val, err := strconv.ParseFloat(s, 64); err == nil {
					c.Float64Slice = append(c.Float64Slice, val)
				}
			}
			
			i++
			
		
		case arg == "--bools":
			
			if i+1 >= len(args) {
				return fmt.Errorf("missing value for --bools")
			}
			
			for _, s := range strings.Split(args[i+1], ",") {
				if val, err := strconv.ParseBool(s); err == nil {
					c.BoolSlice = append(c.BoolSlice, val)
				}
			}
			
			i++
			
		
		case arg == "--bytes":
			
			if i+1 >= len(args) {
				return fmt.Errorf("missing value for --bytes")
			}
			
			i++
			
		
		case arg == "--runes":
			
			if i+1 >= len(args) {
				return fmt.Errorf("missing value for --runes")
			}
			
			i++
			
		
		case arg == "--strings":
			
			if i+1 >= len(args) {
				return fmt.Errorf("missing value for --strings")
			}
			
			c.StringSlice = append(c.StringSlice, strings.Split(args[i+1], ",")...)
			
			i++
			
		
		
		default:
			return fmt.Errorf("unknown option: %s", arg)
		}
	}

	return nil
}

func (c *Config) Usage() {
	fmt.Println(`USAGE:
  myapp [OPTIONS]

OPTIONS:
    -c, --config    指定配置文件路径 (支持 JSON, YAML, TOML)
    -h, --help      显示帮助信息
    --ints    整数切片 (default: 1,2,3)
    --int8s    int8切片 (default: 1,2,3)
    --int16s    int16切片 (default: 1,2,3)
    --int32s    int32切片 (default: 1,2,3)
    --int64s    int64切片 (default: 1,2,3)
    --uints    uint切片 (default: 1,2,3)
    --uint8s    uint8切片 (default: 1,2,3)
    --uint16s    uint16切片 (default: 1,2,3)
    --uint32s    uint32切片 (default: 1,2,3)
    --uint64s    uint64切片 (default: 1,2,3)
    --float32s    float32切片 (default: 1.1,2.2,3.3)
    --float64s    float64切片 (default: 1.1,2.2,3.3)
    --bools    布尔切片 (default: true,false,true)
    --bytes    字节切片 (default: abc)
    --runes    字符切片 (default: 你好世界)
    --strings    字符串切片 (default: a,b,c)
`)
}

func (c *Config) loadFromConfigFile(configFile string) error {
	data, err := os.ReadFile(configFile)
	if err != nil {
		return fmt.Errorf("读取配置文件失败: %w", err)
	}

	// 根据文件扩展名选择解析方式
	ext := filepath.Ext(configFile)
	switch strings.ToLower(ext) {
	case ".json":
		return json.Unmarshal(data, c)
	case ".yaml", ".yml":
		return yaml.Unmarshal(data, c)
	case ".toml":
		_, err := toml.Decode(string(data), c)
		return err
	default:
		return fmt.Errorf("不支持的配置文件格式: %s", ext)
	}
}

