// Code generated by clop-gen; DO NOT EDIT.

package main

import (
	"encoding/json"
	"fmt"
	"github.com/BurntSushi/toml"
	"gopkg.in/yaml.v3"
	"os"
	"path/filepath"
	"strconv"
	"strings"
)

// Options的Parse方法，用于解析命令行参数
func (c *Options) Parse(args []string) error {
	if len(args) == 0 {
		args = os.Args[1:]
	}

	// 从环境变量中读取值

	if envVal := os.Getenv("UINT32_VALUE"); envVal != "" {

	}

	if envVal := os.Getenv("UINT32_PTR_VALUE"); envVal != "" {

	}

	if envVal := os.Getenv("UINT32_SLICE_VALUE"); envVal != "" {

		for _, s := range strings.Split(envVal, ",") {
			if val, err := strconv.ParseUint(s, 10, 32); err == nil {
				c.Uint32Slice = append(c.Uint32Slice, uint32(val))
			}
		}

	}

	if envVal := os.Getenv("UINT32_SLICE_PTR_VALUE"); envVal != "" {

	}

	// 检查是否指定了配置文件
	var configFile string
	for i := 0; i < len(args); i++ {
		if args[i] == "--config" || args[i] == "-c" {
			if i+1 < len(args) {
				configFile = args[i+1]
				// 移除 --config 和它的值，避免后续解析错误
				if i+2 < len(args) {
					args = append(args[:i], args[i+2:]...)
				} else {
					args = args[:i]
				}
				i--
				break
			}
		}
	}

	// 从配置文件加载选项
	if configFile != "" {
		if err := c.loadFromConfigFile(configFile); err != nil {
			return fmt.Errorf("加载配置文件失败: %w", err)
		}
	}

	for i := 0; i < len(args); i++ {
		arg := args[i]
		switch {
		case arg == "--help" || arg == "-h":
			c.Usage()
			os.Exit(0)

		case arg == "-u" || arg == "--uint32":

			if i+1 >= len(args) {
				return fmt.Errorf("missing value for -u or --uint32")
			}

			val, err := strconv.ParseUint(args[i+1], 10, 32)
			if err != nil {
				return fmt.Errorf("invalid value for -u or --uint32: %v", err)
			}
			c.Uint32 = uint32(val)

			i++

		case arg == "--uint32-ptr":

			if i+1 >= len(args) {
				return fmt.Errorf("missing value for --uint32-ptr")
			}

			val, err := strconv.ParseUint(args[i+1], 10, 32)
			if err != nil {
				return fmt.Errorf("invalid value for --uint32-ptr: %v", err)
			}
			val32 := uint32(val)
			c.Uint32Ptr = &val32

			i++

		case arg == "--uint32-slice":

			if i+1 >= len(args) {
				return fmt.Errorf("missing value for --uint32-slice")
			}

			for _, s := range strings.Split(args[i+1], ",") {
				if val, err := strconv.ParseUint(s, 10, 32); err == nil {
					c.Uint32Slice = append(c.Uint32Slice, uint32(val))
				}
			}

			i++

		case arg == "--uint32-slice-ptr":

			if i+1 >= len(args) {
				return fmt.Errorf("missing value for --uint32-slice-ptr")
			}

			i++

		case arg == "-h" || arg == "--help":

			c.Help = true

		default:
			return fmt.Errorf("unknown option: %s", arg)
		}
	}

	return nil
}

// UsageTmpl 是用于生成 Usage 函数的模板
func (c *Options) Usage() {
	fmt.Println(`USAGE:
  myapp [OPTIONS]

OPTIONS:
    -c, --config    指定配置文件路径 (支持 JSON, YAML, TOML)
    -h, --help      显示帮助信息
    -u, --uint32    A uint32 value [env: UINT32_VALUE]
    --uint32-ptr    A uint32 pointer value [env: UINT32_PTR_VALUE]
    --uint32-slice    A slice of uint32 values [env: UINT32_SLICE_VALUE]
    --uint32-slice-ptr    A pointer to a slice of uint32 values [env: UINT32_SLICE_PTR_VALUE]
    -h, --help    Show help information
`)
}

func (c *Options) loadFromConfigFile(configFile string) error {
	data, err := os.ReadFile(configFile)
	if err != nil {
		return fmt.Errorf("读取配置文件失败: %w", err)
	}

	// 根据文件扩展名选择解析方式
	ext := filepath.Ext(configFile)
	switch strings.ToLower(ext) {
	case ".json":
		return json.Unmarshal(data, c)
	case ".yaml", ".yml":
		return yaml.Unmarshal(data, c)
	case ".toml":
		_, err := toml.Decode(string(data), c)
		return err
	default:
		return fmt.Errorf("不支持的配置文件格式: %s", ext)
	}
}
