
// Code2 generated by clop-gen; DO NOT EDIT.

package main
import (
	"fmt"
	"os"
	"strings"
	"encoding/json"
	"gopkg.in/yaml.v3"
	"github.com/BurntSushi/toml"
	"path/filepath"
	"net"
)

// Config的Parse方法，用于解析命令行参数
func (c *Config) Parse(args []string) error {
	if len(args) == 0 {
		args = os.Args[1:]
	}

	// 设置默认值
	if ip := net.ParseIP("127.0.0.1"); ip != nil {
		c.ServerIP = ip
	}
	
	if _, ipNet, err := net.ParseCIDR("192.168.1.0/24"); err == nil {
		c.ServerNetwork = *ipNet
	}
	

	// 从环境变量中读取值

	if envVal := os.Getenv("SERVER_IP"); envVal != "" {
		
		if ip := net.ParseIP(envVal); ip != nil {
			c.ServerIP = ip
		}
		
	}

	if envVal := os.Getenv("SERVER_NETWORK"); envVal != "" {
		
		if _, ipNet, err := net.ParseCIDR(envVal); err == nil {
			c.ServerNetwork = *ipNet
		}
		
	}

	

	// 检查是否指定了配置文件
	var configFile string
	for i := 0; i < len(args); i++ {
		if args[i] == "--config" || args[i] == "-c" {
			if i+1 < len(args) {
				configFile = args[i+1]
				// 移除 --config 和它的值，避免后续解析错误
				if i+2 < len(args) {
					args = append(args[:i], args[i+2:]...)
				} else {
					args = args[:i]
				}
				i--
				break
			}
		}
	}

	// 从配置文件加载选项
	if configFile != "" {
		if err := c.loadFromConfigFile(configFile); err != nil {
			return fmt.Errorf("加载配置文件失败: %w", err)
		}
	}

	for i := 0; i < len(args); i++ {
		arg := args[i]
		switch {
		case arg == "--help" || arg == "-h":
			c.Usage()
			os.Exit(0)
		
		case arg == "--server-ip":
			
			if i+1 >= len(args) {
				return fmt.Errorf("missing value for --server-ip")
			}
			
			if ip := net.ParseIP(args[i+1]); ip != nil {
				c.ServerIP = ip
			}
			
			i++
			
		
		case arg == "--client-ip":
			
			if i+1 >= len(args) {
				return fmt.Errorf("missing value for --client-ip")
			}
			
			if ip := net.ParseIP(args[i+1]); ip != nil {
				c.ClientIP = &ip
			}
			
			i++
			
		
		case arg == "--server-network":
			
			if i+1 >= len(args) {
				return fmt.Errorf("missing value for --server-network")
			}
			
			if _, ipNet, err := net.ParseCIDR(args[i+1]); err == nil {
				c.ServerNetwork = *ipNet
			}
			
			i++
			
		
		case arg == "--client-network":
			
			if i+1 >= len(args) {
				return fmt.Errorf("missing value for --client-network")
			}
			
			if _, ipNet, err := net.ParseCIDR(args[i+1]); err == nil {
				c.ClientNetwork = ipNet
			}
			
			i++
			
		
		case arg == "-h,--help":
			
			c.Help = true
			
		
		
		default:
			return fmt.Errorf("unknown option: %s", arg)
		}
	}

	return nil
}

func (c *Config) Usage() {
	fmt.Println(`USAGE:
  myapp [OPTIONS]

OPTIONS:
    -c, --config    指定配置文件路径 (支持 JSON, YAML, TOML)
    -h, --help      显示帮助信息
    --server-ip    服务器 IP 地址 [env: SERVER_IP] (default: 127.0.0.1)
    --client-ip    客户端 IP 地址
    --server-network    服务器网络 CIDR [env: SERVER_NETWORK] (default: 192.168.1.0/24)
    --client-network    客户端网络 CIDR
    -h,--help    显示帮助信息
`)
}

func (c *Config) loadFromConfigFile(configFile string) error {
	data, err := os.ReadFile(configFile)
	if err != nil {
		return fmt.Errorf("读取配置文件失败: %w", err)
	}

	// 根据文件扩展名选择解析方式
	ext := filepath.Ext(configFile)
	switch strings.ToLower(ext) {
	case ".json":
		return json.Unmarshal(data, c)
	case ".yaml", ".yml":
		return yaml.Unmarshal(data, c)
	case ".toml":
		_, err := toml.Decode(string(data), c)
		return err
	default:
		return fmt.Errorf("不支持的配置文件格式: %s", ext)
	}
}

