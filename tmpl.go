package quickclop

import (
	"go/ast"
	"os"
	"text/template"
)

func generateCode(structName string, st *ast.StructType) {
	tmpl := template.Must(template.New("clop").Parse(`
// Code generated by clop-gen; DO NOT EDIT.

package main

import (
    "fmt"
    "os"
    "strconv"
    "strings"
)

func (c *{{.Name}}) Parse(args []string) error {
    for i := 0; i < len(args); i++ {
        arg := args[i]
        switch {
        {{- range .Fields}}
        {{- if .Short}}
        case arg == "-{{.Short}}" || arg == "--{{.Long}}":
            {{- if eq .Type "bool" }}
            c.{{.Name}} = true
            {{- else}}
            if i+1 >= len(args) {
                return fmt.Errorf("missing value for {{.Name}}")
            }
            val, err := strconv.Parse{{.ParseFunc}}(args[i+1], 10)
            if err != nil {
                return fmt.Errorf("invalid {{.Name}} value: %v", err)
            }
            c.{{.Name}} = val
            i++
            {{- end}}
        {{- end}}
        {{- if .Args}}
        case !strings.HasPrefix(arg, "-"):
            c.{{.Name}} = append(c.{{.Name}}, arg)
        {{- end}}
        {{- end}}
        default:
            return fmt.Errorf("unknown option: %s", arg)
        }
    }
    return nil
}

func (c *{{.Name}}) Usage() {
    fmt.Println(` + "`" + `USAGE:
  myapp [OPTIONS]{{if .HasArgs}} [ARGS]{{end}}

OPTIONS:
    {{- range .Fields}}
    {{- if .Short}}
    -{{.Short}}, --{{.Long}} {{.Type}}    {{.Usage}}{{if .Default}} (default: {{.Default}}){{end}}
    {{- end}}
    {{- end}}

ARGS:
    {{- range .Fields}}
    {{- if .Args}}
    {{.Name}}    {{.Usage}}
    {{- end}}
    {{- end}}
` + "`" + `)
}

`))

	var fields []fieldInfo
	for _, f := range st.Fields.List {
		info := parseField(f)
		fields = append(fields, info)
	}

	tmpl.Execute(os.Stdout, struct {
		Name    string
		Fields  []fieldInfo
		HasArgs bool
	}{
		Name:    structName,
		Fields:  fields,
		HasArgs: hasArgs(fields),
	})
}

type fieldInfo struct {
	Name      string
	Type      string
	Tag       string
	Short     string
	Long      string
	Usage     string
	Default   string
	Args      bool
	ParseFunc string
	IsNested  bool
	CmdName   string
}
