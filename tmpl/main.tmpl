{{ define "main" }}
{{ template "import" .}}

// {{ .StructName }}的Parse方法，用于解析命令行参数
func (c *{{ .StructName }}) Parse(args []string) error {
	if len(args) == 0 {
		args = os.Args[1:]
	}

	{{ template "has_version" . }}

	{{- template "default_value" . }}

	{{- template "env" . }}

	{{ if .HasSubcommands }}
	// 检查是否有子命令
	if len(args) > 0 && !strings.HasPrefix(args[0], "-") {
		subcommand := args[0]
		subcommandArgs := args[1:]

		switch subcommand {
		{{ range .Subcommands }}
		case "{{ .Name }}":
			return c.{{ .Name }}.Parse(subcommandArgs)
		{{ end }}
		default:
			return fmt.Errorf("未知子命令: %s", subcommand)
		}
	}
	{{ end }}

	// 检查是否指定了配置文件
	var configFile string
	for i := 0; i < len(args); i++ {
		if args[i] == "--config" || args[i] == "-c" {
			if i+1 < len(args) {
				configFile = args[i+1]
				// 移除 --config 和它的值，避免后续解析错误
				if i+2 < len(args) {
					args = append(args[:i], args[i+2:]...)
				} else {
					args = args[:i]
				}
				i--
				break
			}
		}
	}

	// 从配置文件加载选项
	if configFile != "" {
		if err := c.loadFromConfigFile(configFile); err != nil {
			return fmt.Errorf("加载配置文件失败: %w", err)
		}
	}

	for i := 0; i < len(args); i++ {
		arg := args[i]
		switch {
		case arg == "--help" || arg == "-h":
			c.Usage()
			os.Exit(0)
		{{- template "short_long" . }}
		default:
			return fmt.Errorf("unknown option: %s", arg)
		}
	}

	return nil
}

{{- template "usage" .}}

{{- template "load_config" .}}
{{- end}}