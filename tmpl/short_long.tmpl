{{ define "short_long" }}
{{ range .Fields }}{{ if not .IsNested }}{{ if not .Args }}
case {{ if .Short }}arg == "-{{ .Short }}"{{ end }}{{ if and .Short .Long }} || {{ end }}{{ if .Long }}arg == "--{{ .Long }}"{{ end }}:
	{{ if and (or (eq .Type "bool") (eq .Type "*bool")) (or (eq .Name "Version") (eq .Name "version")) ($.HasVersionFlag) }}
	{{- if $.Version }}
	fmt.Printf("{{ $.AppName }} version {{ $.Version }}\n")
	{{- else }}
	fmt.Printf("{{ $.AppName }}\n")
	{{- end }}
	{{- if $.Description }}
	fmt.Printf("{{ $.Description }}\n")
	{{- end }}
	{{- if $.BuildInfo }}
	fmt.Printf("Build: {{ $.BuildInfo }}\n")
	{{- end }}
	return nil
	{{ else if eq .Type "bool" }}
	c.{{ .Name }} = true
	{{ else if eq .Type "*bool" }}
	val := true
	c.{{ .Name }} = &val
	{{ else }}
	if i+1 >= len(args) {
		return fmt.Errorf("missing value for {{ if and .Short .Long }}-{{ .Short }} or --{{ .Long }}{{ else if .Long }}--{{ .Long }}{{ else }}-{{ .Short }}{{ end }}")
	}
	{{ if eq .Type "int" }}
	val, err := strconv.Atoi(args[i+1])
	if err != nil {
		return fmt.Errorf("invalid value for {{ if and .Short .Long }}-{{ .Short }} or --{{ .Long }}{{ else if .Long }}--{{ .Long }}{{ else }}-{{ .Short }}{{ end }}: %v", err)
	}
	c.{{ .Name }} = val
	{{ else if eq .Type "*int" }}
	val, err := strconv.Atoi(args[i+1])
	if err != nil {
		return fmt.Errorf("invalid value for {{ if and .Short .Long }}-{{ .Short }} or --{{ .Long }}{{ else if .Long }}--{{ .Long }}{{ else }}-{{ .Short }}{{ end }}: %v", err)
	}
	c.{{ .Name }} = &val
	{{ else if eq .Type "int8" }}
	val, err := strconv.ParseInt(args[i+1], 10, 8)
	if err != nil {
		return fmt.Errorf("invalid value for {{ if and .Short .Long }}-{{ .Short }} or --{{ .Long }}{{ else if .Long }}--{{ .Long }}{{ else }}-{{ .Short }}{{ end }}: %v", err)
	}
	c.{{ .Name }} = int8(val)
	{{ else if eq .Type "*int8" }}
	val, err := strconv.ParseInt(args[i+1], 10, 8)
	if err != nil {
		return fmt.Errorf("invalid value for {{ if and .Short .Long }}-{{ .Short }} or --{{ .Long }}{{ else if .Long }}--{{ .Long }}{{ else }}-{{ .Short }}{{ end }}: %v", err)
	}
	val8 := int8(val)
	c.{{ .Name }} = &val8
	{{ else if eq .Type "int16" }}
	val, err := strconv.ParseInt(args[i+1], 10, 16)
	if err != nil {
		return fmt.Errorf("invalid value for {{ if and .Short .Long }}-{{ .Short }} or --{{ .Long }}{{ else if .Long }}--{{ .Long }}{{ else }}-{{ .Short }}{{ end }}: %v", err)
	}
	c.{{ .Name }} = int16(val)
	{{ else if eq .Type "*int16" }}
	val, err := strconv.ParseInt(args[i+1], 10, 16)
	if err != nil {
		return fmt.Errorf("invalid value for {{ if and .Short .Long }}-{{ .Short }} or --{{ .Long }}{{ else if .Long }}--{{ .Long }}{{ else }}-{{ .Short }}{{ end }}: %v", err)
	}
	val16 := int16(val)
	c.{{ .Name }} = &val16
	{{ else if eq .Type "int32" }}
	val, err := strconv.ParseInt(args[i+1], 10, 32)
	if err != nil {
		return fmt.Errorf("invalid value for {{ if and .Short .Long }}-{{ .Short }} or --{{ .Long }}{{ else if .Long }}--{{ .Long }}{{ else }}-{{ .Short }}{{ end }}: %v", err)
	}
	c.{{ .Name }} = int32(val)
	{{ else if eq .Type "*int32" }}
	val, err := strconv.ParseInt(args[i+1], 10, 32)
	if err != nil {
		return fmt.Errorf("invalid value for {{ if and .Short .Long }}-{{ .Short }} or --{{ .Long }}{{ else if .Long }}--{{ .Long }}{{ else }}-{{ .Short }}{{ end }}: %v", err)
	}
	val32 := int32(val)
	c.{{ .Name }} = &val32
	{{ else if eq .Type "int64" }}
	val, err := strconv.ParseInt(args[i+1], 10, 64)
	if err != nil {
		return fmt.Errorf("invalid value for {{ if and .Short .Long }}-{{ .Short }} or --{{ .Long }}{{ else if .Long }}--{{ .Long }}{{ else }}-{{ .Short }}{{ end }}: %v", err)
	}
	c.{{ .Name }} = val
	{{ else if eq .Type "*int64" }}
	val, err := strconv.ParseInt(args[i+1], 10, 64)
	if err != nil {
		return fmt.Errorf("invalid value for {{ if and .Short .Long }}-{{ .Short }} or --{{ .Long }}{{ else if .Long }}--{{ .Long }}{{ else }}-{{ .Short }}{{ end }}: %v", err)
	}
	c.{{ .Name }} = &val
	{{ else if eq .Type "uint" }}
	val, err := strconv.ParseUint(args[i+1], 10, 0)
	if err != nil {
		return fmt.Errorf("invalid value for {{ if and .Short .Long }}-{{ .Short }} or --{{ .Long }}{{ else if .Long }}--{{ .Long }}{{ else }}-{{ .Short }}{{ end }}: %v", err)
	}
	c.{{ .Name }} = uint(val)
	{{ else if eq .Type "*uint" }}
	val, err := strconv.ParseUint(args[i+1], 10, 0)
	if err != nil {
		return fmt.Errorf("invalid value for {{ if and .Short .Long }}-{{ .Short }} or --{{ .Long }}{{ else if .Long }}--{{ .Long }}{{ else }}-{{ .Short }}{{ end }}: %v", err)
	}
	val2 := uint(val)
	c.{{ .Name }} = &val2
	{{ else if eq .Type "uint8" }}
	val, err := strconv.ParseUint(args[i+1], 10, 8)
	if err != nil {
		return fmt.Errorf("invalid value for {{ if and .Short .Long }}-{{ .Short }} or --{{ .Long }}{{ else if .Long }}--{{ .Long }}{{ else }}-{{ .Short }}{{ end }}: %v", err)
	}
	c.{{ .Name }} = uint8(val)
	{{ else if eq .Type "*uint8" }}
	val, err := strconv.ParseUint(args[i+1], 10, 8)
	if err != nil {
		return fmt.Errorf("invalid value for {{ if and .Short .Long }}-{{ .Short }} or --{{ .Long }}{{ else if .Long }}--{{ .Long }}{{ else }}-{{ .Short }}{{ end }}: %v", err)
	}
	val8 := uint8(val)
	c.{{ .Name }} = &val8
	{{ else if eq .Type "uint16" }}
	val, err := strconv.ParseUint(args[i+1], 10, 16)
	if err != nil {
		return fmt.Errorf("invalid value for {{ if and .Short .Long }}-{{ .Short }} or --{{ .Long }}{{ else if .Long }}--{{ .Long }}{{ else }}-{{ .Short }}{{ end }}: %v", err)
	}
	c.{{ .Name }} = uint16(val)
	{{ else if eq .Type "*uint16" }}
	val, err := strconv.ParseUint(args[i+1], 10, 16)
	if err != nil {
		return fmt.Errorf("invalid value for {{ if and .Short .Long }}-{{ .Short }} or --{{ .Long }}{{ else if .Long }}--{{ .Long }}{{ else }}-{{ .Short }}{{ end }}: %v", err)
	}
	val16 := uint16(val)
	c.{{ .Name }} = &val16
	{{ else if eq .Type "uint32" }}
	val, err := strconv.ParseUint(args[i+1], 10, 32)
	if err != nil {
		return fmt.Errorf("invalid value for {{ if and .Short .Long }}-{{ .Short }} or --{{ .Long }}{{ else if .Long }}--{{ .Long }}{{ else }}-{{ .Short }}{{ end }}: %v", err)
	}
	c.{{ .Name }} = uint32(val)
	{{ else if eq .Type "*uint32" }}
	val, err := strconv.ParseUint(args[i+1], 10, 32)
	if err != nil {
		return fmt.Errorf("invalid value for {{ if and .Short .Long }}-{{ .Short }} or --{{ .Long }}{{ else if .Long }}--{{ .Long }}{{ else }}-{{ .Short }}{{ end }}: %v", err)
	}
	val32 := uint32(val)
	c.{{ .Name }} = &val32
	{{ else if eq .Type "uint64" }}
	val, err := strconv.ParseUint(args[i+1], 10, 64)
	if err != nil {
		return fmt.Errorf("invalid value for {{ if and .Short .Long }}-{{ .Short }} or --{{ .Long }}{{ else if .Long }}--{{ .Long }}{{ else }}-{{ .Short }}{{ end }}: %v", err)
	}
	c.{{ .Name }} = val
	{{ else if eq .Type "*uint64" }}
	val, err := strconv.ParseUint(args[i+1], 10, 64)
	if err != nil {
		return fmt.Errorf("invalid value for {{ if and .Short .Long }}-{{ .Short }} or --{{ .Long }}{{ else if .Long }}--{{ .Long }}{{ else }}-{{ .Short }}{{ end }}: %v", err)
	}
	c.{{ .Name }} = &val
	{{ else if eq .Type "float64" }}
	val, err := strconv.ParseFloat(args[i+1], 64)
	if err != nil {
		return fmt.Errorf("invalid value for {{ if and .Short .Long }}-{{ .Short }} or --{{ .Long }}{{ else if .Long }}--{{ .Long }}{{ else }}-{{ .Short }}{{ end }}: %v", err)
	}
	c.{{ .Name }} = val
	{{ else if eq .Type "*float64" }}
	val, err := strconv.ParseFloat(args[i+1], 64)
	if err != nil {
		return fmt.Errorf("invalid value for {{ if and .Short .Long }}-{{ .Short }} or --{{ .Long }}{{ else if .Long }}--{{ .Long }}{{ else }}-{{ .Short }}{{ end }}: %v", err)
	}
	c.{{ .Name }} = &val
	{{ else if eq .Type "float32" }}
	val, err := strconv.ParseFloat(args[i+1], 32)
	if err != nil {
		return fmt.Errorf("invalid value for {{ if and .Short .Long }}-{{ .Short }} or --{{ .Long }}{{ else if .Long }}--{{ .Long }}{{ else }}-{{ .Short }}{{ end }}: %v", err)
	}
	c.{{ .Name }} = float32(val)
	{{ else if eq .Type "*float32" }}
	val, err := strconv.ParseFloat(args[i+1], 32)
	if err != nil {
		return fmt.Errorf("invalid value for {{ if and .Short .Long }}-{{ .Short }} or --{{ .Long }}{{ else if .Long }}--{{ .Long }}{{ else }}-{{ .Short }}{{ end }}: %v", err)
	}
	val32 := float32(val)
	c.{{ .Name }} = &val32
	{{ else if eq .Type "string" }}
	c.{{ .Name }} = args[i+1]
	{{ else if eq .Type "*string" }}
	val := args[i+1]
	c.{{ .Name }} = &val
	{{ else if eq .Type "[]string" }}
	c.{{ .Name }} = append(c.{{ .Name }}, strings.Split(args[i+1], ",")...)
	{{ else if eq .Type "*[]string" }}
	slice := strings.Split(args[i+1], ",")
	c.{{ .Name }} = &slice
	{{ else if eq .Type "[]int" }}
	for _, s := range strings.Split(args[i+1], ",") {
		if val, err := strconv.Atoi(s); err == nil {
			c.{{ .Name }} = append(c.{{ .Name }}, val)
		}
	}
	{{ else if eq .Type "*[]int" }}
	var slice []int
	for _, s := range strings.Split(args[i+1], ",") {
		if val, err := strconv.Atoi(s); err == nil {
			slice = append(slice, val)
		}
	}
	c.{{ .Name }} = &slice
	{{ else if eq .Type "[]int8" }}
	for _, s := range strings.Split(args[i+1], ",") {
		if val, err := strconv.ParseInt(s, 10, 8); err == nil {
			c.{{ .Name }} = append(c.{{ .Name }}, int8(val))
		}
	}
	{{ else if eq .Type "*[]int8" }}
	var slice []int8
	for _, s := range strings.Split(args[i+1], ",") {
		if val, err := strconv.ParseInt(s, 10, 8); err == nil {
			slice = append(slice, int8(val))
		}
	}
	c.{{ .Name }} = &slice
	{{ else if eq .Type "[]int16" }}
	for _, s := range strings.Split(args[i+1], ",") {
		if val, err := strconv.ParseInt(s, 10, 16); err == nil {
			c.{{ .Name }} = append(c.{{ .Name }}, int16(val))
		}
	}
	{{ else if eq .Type "*[]int16" }}
	var slice []int16
	for _, s := range strings.Split(args[i+1], ",") {
		if val, err := strconv.ParseInt(s, 10, 16); err == nil {
			slice = append(slice, int16(val))
		}
	}
	c.{{ .Name }} = &slice
	{{ else if eq .Type "[]int32" }}
	for _, s := range strings.Split(args[i+1], ",") {
		if val, err := strconv.ParseInt(s, 10, 32); err == nil {
			c.{{ .Name }} = append(c.{{ .Name }}, int32(val))
		}
	}
	{{ else if eq .Type "*[]int32" }}
	var slice []int32
	for _, s := range strings.Split(args[i+1], ",") {
		if val, err := strconv.ParseInt(s, 10, 32); err == nil {
			slice = append(slice, int32(val))
		}
	}
	c.{{ .Name }} = &slice
	{{ else if eq .Type "[]int64" }}
	for _, s := range strings.Split(args[i+1], ",") {
		if val, err := strconv.ParseInt(s, 10, 64); err == nil {
			c.{{ .Name }} = append(c.{{ .Name }}, val)
		}
	}
	{{ else if eq .Type "*[]int64" }}
	var slice []int64
	for _, s := range strings.Split(args[i+1], ",") {
		if val, err := strconv.ParseInt(s, 10, 64); err == nil {
			slice = append(slice, val)
		}
	}
	c.{{ .Name }} = &slice
	{{ else if eq .Type "[]uint" }}
	for _, s := range strings.Split(args[i+1], ",") {
		if val, err := strconv.ParseUint(s, 10, 0); err == nil {
			c.{{ .Name }} = append(c.{{ .Name }}, uint(val))
		}
	}
	{{ else if eq .Type "*[]uint" }}
	var slice []uint
	for _, s := range strings.Split(args[i+1], ",") {
		if val, err := strconv.ParseUint(s, 10, 0); err == nil {
			slice = append(slice, uint(val))
		}
	}
	c.{{ .Name }} = &slice
	{{ else if eq .Type "[]uint8" }}
	for _, s := range strings.Split(args[i+1], ",") {
		if val, err := strconv.ParseUint(s, 10, 8); err == nil {
			c.{{ .Name }} = append(c.{{ .Name }}, uint8(val))
		}
	}
	{{ else if eq .Type "*[]uint8" }}
	var slice []uint8
	for _, s := range strings.Split(args[i+1], ",") {
		if val, err := strconv.ParseUint(s, 10, 8); err == nil {
			slice = append(slice, uint8(val))
		}
	}
	c.{{ .Name }} = &slice
	{{ else if eq .Type "[]uint16" }}
	for _, s := range strings.Split(args[i+1], ",") {
		if val, err := strconv.ParseUint(s, 10, 16); err == nil {
			c.{{ .Name }} = append(c.{{ .Name }}, uint16(val))
		}
	}
	{{ else if eq .Type "*[]uint16" }}
	var slice []uint16
	for _, s := range strings.Split(args[i+1], ",") {
		if val, err := strconv.ParseUint(s, 10, 16); err == nil {
			slice = append(slice, uint16(val))
		}
	}
	c.{{ .Name }} = &slice
	{{ else if eq .Type "[]uint32" }}
	for _, s := range strings.Split(args[i+1], ",") {
		if val, err := strconv.ParseUint(s, 10, 32); err == nil {
			c.{{ .Name }} = append(c.{{ .Name }}, uint32(val))
		}
	}
	{{ else if eq .Type "*[]uint32" }}
	var slice []uint32
	for _, s := range strings.Split(args[i+1], ",") {
		if val, err := strconv.ParseUint(s, 10, 32); err == nil {
			slice = append(slice, uint32(val))
		}
	}
	c.{{ .Name }} = &slice
	{{ else if eq .Type "[]uint64" }}
	for _, s := range strings.Split(args[i+1], ",") {
		if val, err := strconv.ParseUint(s, 10, 64); err == nil {
			c.{{ .Name }} = append(c.{{ .Name }}, val)
		}
	}
	{{ else if eq .Type "*[]uint64" }}
	var slice []uint64
	for _, s := range strings.Split(args[i+1], ",") {
		if val, err := strconv.ParseUint(s, 10, 64); err == nil {
			slice = append(slice, val)
		}
	}
	c.{{ .Name }} = &slice
	{{ else if eq .Type "[]float32" }}
	for _, s := range strings.Split(args[i+1], ",") {
		if val, err := strconv.ParseFloat(s, 32); err == nil {
			c.{{ .Name }} = append(c.{{ .Name }}, float32(val))
		}
	}
	{{ else if eq .Type "*[]float32" }}
	var slice []float32
	for _, s := range strings.Split(args[i+1], ",") {
		if val, err := strconv.ParseFloat(s, 32); err == nil {
			slice = append(slice, float32(val))
		}
	}
	c.{{ .Name }} = &slice
	{{ else if eq .Type "[]float64" }}
	for _, s := range strings.Split(args[i+1], ",") {
		if val, err := strconv.ParseFloat(s, 64); err == nil {
			c.{{ .Name }} = append(c.{{ .Name }}, val)
		}
	}
	{{ else if eq .Type "*[]float64" }}
	var slice []float64
	for _, s := range strings.Split(args[i+1], ",") {
		if val, err := strconv.ParseFloat(s, 64); err == nil {
			slice = append(slice, val)
		}
	}
	c.{{ .Name }} = &slice
	{{ else if eq .Type "[]bool" }}
	for _, s := range strings.Split(args[i+1], ",") {
		if val, err := strconv.ParseBool(s); err == nil {
			c.{{ .Name }} = append(c.{{ .Name }}, val)
		}
	}
	{{ else if eq .Type "*[]bool" }}
	var slice []bool
	for _, s := range strings.Split(args[i+1], ",") {
		if val, err := strconv.ParseBool(s); err == nil {
			slice = append(slice, val)
		}
	}
	c.{{ .Name }} = &slice
	{{ else if eq .Type "time.Duration" }}
	if duration, err := time.ParseDuration(args[i+1]); err == nil {
		c.{{ .Name }} = duration
	}
	{{ else if eq .Type "*time.Duration" }}
	if duration, err := time.ParseDuration(args[i+1]); err == nil {
		c.{{ .Name }} = &duration
	}
	{{ else if eq .Type "time.Time" }}
	if t, err := time.Parse(time.RFC3339, args[i+1]); err == nil {
		c.{{ .Name }} = t
	}
	{{ else if eq .Type "*time.Time" }}
	if t, err := time.Parse(time.RFC3339, args[i+1]); err == nil {
		c.{{ .Name }} = &t
	}
	{{ else if eq .Type "url.URL" }}
	if u, err := url.Parse(args[i+1]); err == nil {
		c.{{ .Name }} = *u
	}
	{{ else if eq .Type "*url.URL" }}
	if u, err := url.Parse(args[i+1]); err == nil {
		c.{{ .Name }} = u
	}
	{{ else if eq .Type "net.IP" }}
	if ip := net.ParseIP(args[i+1]); ip != nil {
		c.{{ .Name }} = ip
	}
	{{ else if eq .Type "*net.IP" }}
	if ip := net.ParseIP(args[i+1]); ip != nil {
		c.{{ .Name }} = &ip
	}
	{{ else if eq .Type "net.IPNet" }}
	if _, ipNet, err := net.ParseCIDR(args[i+1]); err == nil {
		c.{{ .Name }} = *ipNet
	}
	{{ else if eq .Type "*net.IPNet" }}
	if _, ipNet, err := net.ParseCIDR(args[i+1]); err == nil {
		c.{{ .Name }} = ipNet
	}
	{{ end }}
	i++
	{{ end }}
{{ end }}{{ end }}{{ end }}
{{ if .HasArgsField }}
case !strings.HasPrefix(arg, "-"):
	{{ range .Fields }}{{ if .Args }}
	{{ if eq .Type "string" }}
	c.{{ .Name }} = arg
	{{ else if eq .Type "*string" }}
	val := arg
	c.{{ .Name }} = &val
	{{ else if eq .Type "[]string" }}
	c.{{ .Name }} = append(c.{{ .Name }}, arg)
	{{ end }}
	{{ end }}
	{{ end }}
{{ end }}
{{ end }}
